{"mappings":"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","sources":["src/index.ts","src/service/prove/index.ts","src/service/index.ts","src/service/config.ts","src/service/state/index.ts","src/service/state/merkle.ts","src/service/wasm/index.ts","src/types.ts","src/web3/index.ts","src/web3/client.ts","src/web3/chain.ts"],"sourcesContent":["export * from './service/prove';\nexport * from './service/state';\nexport * from './service/wasm';\nexport * from './types';\nexport * from './web3';\n","import { buildURLData } from 'web-utility';\n\nimport {\n  CreateTaskParams,\n  ProofDetail,\n  Task,\n  TaskListQueryParams,\n  WithSignature\n} from '../../types';\nimport { ChainInfo, ZKCWeb3Provider } from '../../web3';\nimport { ZKCService } from '..';\n\nexport class ZKCProveService extends ZKCService {\n  /**\n   * create a task to prove the inputs, upload the proof to the chain.\n   * @param taskInfo task information\n   * @returns task status and application detail\n   */\n  createOne(taskInfo: WithSignature<CreateTaskParams>) {\n    return this.client.post<ProofDetail>('task/proof', taskInfo);\n  }\n\n  /**\n   * Request task list\n   * @param query request parameter\n   * @returns task list\n   */\n  getList(query: TaskListQueryParams) {\n    return this.client.get<Task[]>(`task?${buildURLData(query)}`);\n  }\n\n  /**\n   * Initialize account and network, prove and deploy task\n   * @param userAddress userAddress already been connected\n   */\n  async settlement(\n    provider: ZKCWeb3Provider,\n    taskInfo: Omit<CreateTaskParams, 'user_address'>,\n    userAddress?: string,\n    chainInfo?: ChainInfo\n  ) {\n    const account = await provider.checkAccount(userAddress);\n    const user_address = account.toLowerCase();\n\n    await provider.switchNet(chainInfo);\n\n    /**\n     * @todo The JSON stringify method behaves differently in different environments, we need to work with the backend to ensure the order of passing the parameters.\n     */\n    const { md5, public_inputs, private_inputs } = taskInfo,\n      data = { user_address, md5, public_inputs, private_inputs };\n\n    const message = JSON.stringify(data);\n\n    const signature = await provider.sign(message);\n\n    return this.createOne({ ...data, signature });\n  }\n}\n","import { HTTPClient } from 'koajax';\n\nimport { ZKCClientBaseURI } from './config';\n\nexport abstract class ZKCService {\n  client = new HTTPClient({ responseType: 'json' });\n\n  constructor(public baseURI = ZKCClientBaseURI) {\n    this.client.baseURI = baseURI;\n  }\n}\n\nexport function logData(target: any, key: string, meta: PropertyDescriptor) {\n  const origin: (...data: any[]) => Promise<any> = meta.value;\n\n  meta.value = async function (...data: any[]) {\n    console.debug(`${key} begin Input:`, data);\n    console.debug(`${key} Context:`, this);\n    try {\n      const result = await origin.apply(this, data);\n      console.debug(`${key} end Output:`, JSON.stringify(result));\n      return result;\n    } catch (error) {\n      console.debug(`${key} Error:`, error);\n      throw error;\n    }\n  };\n}\n","export const ZKCClientBaseURI = 'https://rpc.zkcross.org';\n\nexport const ZKCStateURI = 'http://localhost:50000/v1';\n","import { ZKCStateURI } from '../config';\nimport { ZKState } from './merkle';\n\nexport * from './merkle';\n\nlet wasmMemory: WebAssembly.Memory;\n\nexport function setMemory(memory: WebAssembly.Memory) {\n  wasmMemory = memory;\n}\n\nexport function getStateEnv(baseURI = ZKCStateURI) {\n  const {\n    merkle_address,\n    merkle_setroot,\n    merkle_getroot,\n    merkle_set,\n    merkle_get,\n    poseidon_new,\n    poseidon_push,\n    poseidon_finalize,\n    cache_set_mode,\n    cache_store_data,\n    cache_set_hash,\n    cache_fetch_data\n  } = new ZKState(baseURI);\n\n  return {\n    merkle_address,\n    merkle_setroot,\n    merkle_getroot,\n    merkle_set,\n    merkle_get,\n    poseidon_new,\n    poseidon_push,\n    poseidon_finalize,\n    cache_set_mode,\n    cache_store_data,\n    cache_set_hash,\n    cache_fetch_data\n  };\n}\n\nlet _print_buf: number[] = [];\n\nfunction print_result(): void {\n  // Convert the array of numbers to a string\n  const result = String.fromCharCode(..._print_buf);\n\n  _print_buf = [];\n\n  console.log(result);\n}\n\nexport const LOG_ENV = {\n  wasm_console_log: (ptr: number, len: number) => {\n    console.log('Inside wasm', wasmMemory, ptr, len);\n    const newBuf = wasmMemory.buffer.slice(ptr, ptr + len);\n    const decoder = new TextDecoder();\n    console.log('wasm_console_log: ', decoder.decode(newBuf));\n  },\n  /**\n   * - Convert the number to a character\n   * - Check if the character is a newline\n   * - Print the accumulated result when encountering a newline\n   * - Append the character to the print buffer\n   */\n  wasm_dbg_char: (data: bigint) =>\n    String.fromCharCode(Number(data)) === '\\n'\n      ? print_result()\n      : _print_buf.push(Number(data)),\n  wasm_dbg: (a: number) => {\n    console.log('Inside wasm, dbg: ', a);\n  }\n};\n","import { HTTPClient } from 'koajax';\n\nimport { ZKCStateURI } from '../config';\n\n/**\n * Merkle tree\n * 0\n * 1 2\n * 3 4 5 6\n * 7 8 9 10 11 12 13 14\n *   ...\n * 2^32-1 2^32 ... 2^33-2\n */\nexport const MERKLE_TREE_HEIGHT = 32n;\n\nexport enum Mode {\n  FETCH,\n  STORE\n}\n\nexport const CACHE = {\n  [Mode.FETCH]: 'ModeFetch',\n  [Mode.STORE]: 'ModeStore'\n};\n\nexport interface LeafData {\n  node: { data: string };\n  hash: string;\n}\n\nexport const generateBigIntArray = (length: number) =>\n  Array.from({ length }, () => BigInt(0));\n\nexport class ZKState {\n  constructor(public baseURI = ZKCStateURI) {\n    this.client.baseURI = baseURI;\n  }\n\n  client = new HTTPClient({ responseType: 'json' });\n\n  /**\n   * address is key, aka index.\n   */\n  private _address = BigInt(0);\n\n  /**\n   * Data returned from merkle_getroot, the root hash of a Merkle tree, [u64; 4]\n   */\n  private _root_hash: bigint[] = [];\n\n  /**\n   * merkle_setroot takes 4 u64 values\n   */\n  private _root_data: bigint[] = [];\n\n  /**\n   * store or fetch hash and data fields\n   */\n  private _cache_mode: Mode = Mode.FETCH;\n\n  private _cache_hash: bigint[] = [];\n\n  private _cache_data: bigint[] = [];\n  /**\n   * Data returned from merkle_get, the hash of some leaf data, [u64; 4]\n   */\n  private _leaf_hash: bigint[] = [];\n\n  /**\n   * Data passed to poseidon_push, array of finite field elements\n   */\n  private _poseidon_buffer: bigint[] = [];\n  /**\n   * Data returned from poseidon_finalize, poseidon hash result, [u64; 4]\n   */\n  private _poseidon_results: bigint[] = [];\n\n  /**\n   * Convert bigint array to base64 string in little endian order\n   */\n  binaryArrayToBase64(bigintArray: bigint[]) {\n    return btoa(\n      // Convert each BigInt to little-endian bytes and push them to the array\n      bigintArray.reduce(\n        (acc, bigIntValue) =>\n          acc +\n          String.fromCharCode(\n            ...new Uint8Array(8).map((unit8, index) =>\n              Number((bigIntValue >> BigInt(index * 8)) & BigInt(0xff))\n            )\n          ),\n        ''\n      )\n    );\n  }\n\n  /**\n   * Convert base64 string to bigint array in little endian order\n   */\n  base64ToBinaryArray(base64String: string) {\n    const binaryString = atob(base64String);\n\n    return generateBigIntArray(binaryString.length / 8).map((bigint, index) =>\n      generateBigIntArray(8).reduce(\n        (acc, u64Value, currentIndex) =>\n          acc +\n          (BigInt(\n            binaryString\n              .slice(index * 8, (index + 1) * 8)\n              .charCodeAt(currentIndex)\n          ) <<\n            BigInt(currentIndex * 8)),\n        BigInt(0)\n      )\n    );\n  }\n\n  /**\n   * rpc synchronous request\n   * @param method request methd\n   * @param path path\n   * @param body request body\n   * @returns respoonse text\n   */\n  requestRPC = (\n    method: string,\n    path: string,\n    body?: XMLHttpRequestBodyInit | Document | null\n  ) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open(method, `${this.client.baseURI}/${path}`, false);\n    xhr.send(body);\n\n    if (xhr.status === 200) return JSON.parse(xhr.responseText);\n\n    throw new Error(`Request failed with status code: ${xhr.status}`);\n  };\n\n  /**\n   * Get merkle tree node address\n   * @param value merkle tree node index\n   */\n  merkle_address = (value: string | number | bigint | boolean) =>\n    (this._address = BigInt(value) + (1n << MERKLE_TREE_HEIGHT) - 1n);\n\n  /**\n   * Get merkle root address hash\n   * @returns [u64; 4]\n   */\n  merkle_getroot = () => {\n    // The client already drained up all the data obtained from remote server.\n    // We need to issue RPC to server again.\n    if (this._root_hash.length) return this._root_hash.shift();\n\n    const data = this.requestRPC('GET', 'root');\n\n    if (!data?.root) throw new Error('Get merkle root hash failed!');\n\n    const binaryData = this.base64ToBinaryArray(data.root);\n\n    this._root_hash.push(...binaryData);\n\n    console.log('get root method, root data', binaryData);\n\n    return this._root_hash.shift();\n  };\n\n  /**\n   * Set merkle root address\n   */\n  merkle_setroot = (value: bigint) => {\n    this._root_data.push(value);\n\n    // merkle_setroot takes 4 u64 values and then set the root hash to this array.\n    if (this._root_data.length !== 4) return;\n\n    const hash = this.binaryArrayToBase64(this._root_data);\n\n    this._root_data = [];\n\n    return this.requestRPC('POST', 'root', JSON.stringify({ hash }));\n  };\n\n  /**\n   * Get merkle leaf data with hash\n   */\n  merkle_get = () => {\n    if (this._leaf_hash.length) return this._leaf_hash.shift();\n\n    // The client already drained up all the data obtained from remote server.\n    // We need to issue RPC to server again.\n\n    const { node } = this.requestRPC('GET', `leaves?index=${this._address}`);\n\n    if (!node) throw new Error('There is no node data for this leaf');\n\n    const { hash } = node;\n\n    this._leaf_hash = this.base64ToBinaryArray(hash);\n\n    console.log('In JS, merkle get hash result:', node, this._leaf_hash);\n\n    return this._leaf_hash.shift();\n  };\n\n  /**\n   * Set data in merkle tree node\n   */\n  merkle_set = (value: bigint) => {\n    this._leaf_hash.push(value);\n    // merkle_set takes 4 u64 values and then set the leaf hash to this array.\n    if (this._leaf_hash.length !== 4) return;\n\n    const hash = this.binaryArrayToBase64(this._leaf_hash);\n\n    console.log('In JavaScript, set index value to', this._leaf_hash);\n\n    let requestData = JSON.stringify({ index: this._address + '', hash });\n\n    if (this._cache_data[0]) {\n      const data = this.binaryArrayToBase64(this._cache_data);\n      console.log('In JavaScript, cache data', this._cache_data);\n      requestData = JSON.stringify({ index: this._address + '', hash, data });\n    }\n\n    this.requestRPC('POST', 'leaves', requestData);\n\n    this._cache_data = [];\n    this._leaf_hash = [];\n  };\n\n  cache_set_mode = (mode: bigint) => (this._cache_mode = Number(mode));\n\n  /**\n   * Create a mapping of data to hash, store or retrieve the corresponding data mapping\n   */\n  cache_set_hash = (value: bigint) => {\n    this._cache_hash.push(value);\n\n    if (this._cache_hash.length !== 4) return;\n\n    const isFetching = this._cache_mode === Mode.FETCH;\n\n    console.log(\n      this._cache_data,\n      this._cache_hash,\n      this._cache_mode,\n      '=====set hash'\n    );\n\n    const base64Hash = this.binaryArrayToBase64(this._cache_hash);\n    const base64Data =\n      !isFetching && this._cache_data\n        ? this.binaryArrayToBase64(this._cache_data)\n        : undefined;\n\n    const datahashrecord = JSON.stringify({\n      data: base64Data,\n      hash: base64Hash,\n      mode: CACHE[this._cache_mode]\n    });\n\n    const { data } = this.requestRPC('POST', 'datahashrecord', datahashrecord);\n\n    console.log(\n      'In JavaScript, fetch cache',\n      'data:',\n      data,\n      '-cache_hash:',\n      this._cache_hash,\n      '-cache_data:',\n      this._cache_data,\n      'mode',\n      this._cache_mode\n    );\n\n    this._cache_hash = [];\n    this._cache_data = isFetching ? this.base64ToBinaryArray(data) : [];\n  };\n\n  cache_fetch_data = () => {\n    if (this._cache_mode !== Mode.FETCH) return this._cache_data.shift();\n\n    this._cache_mode = Mode.STORE;\n\n    const length = BigInt(this._cache_data.length);\n    console.log('fetch success!length: ', length, 'data:', this._cache_data);\n    return length;\n  };\n\n  cache_store_data = (value: bigint) => {\n    this._cache_data.push(value);\n  };\n\n  poseidon_new = () => (this._poseidon_buffer = []);\n\n  poseidon_push = (value: bigint) => this._poseidon_buffer.push(value);\n\n  poseidon_finalize = () => {\n    if (this._poseidon_results.length) return this._poseidon_results.shift();\n\n    const base64 = this.binaryArrayToBase64(this._poseidon_buffer);\n    console.log(\n      'In JavaScript, poseidon buffer',\n      this._poseidon_buffer,\n      base64\n    );\n\n    const { hash } = this.requestRPC(\n      'POST',\n      'poseidon',\n      JSON.stringify({ data: base64 })\n    );\n    if (!hash) return;\n    // TODO: we may need to evict some data hashes here.\n    // Otherwise the space used by this map will keep growing.\n    const poseidon_results_hash_array = this.base64ToBinaryArray(hash);\n\n    this._poseidon_results.push(...poseidon_results_hash_array);\n\n    console.log('In JavaScript, poseidon results', this._poseidon_results);\n\n    return this._poseidon_results.shift();\n  };\n}\n","import { makeFormData } from 'koajax';\nimport type {} from 'lodash';\nimport memoize from 'lodash.memoize';\nimport { buildURLData } from 'web-utility';\n\nimport {\n  DeployWasmApplicationParams,\n  ProofDetail,\n  Task,\n  WasmApplicationListQueryParams\n} from '../../types';\nimport { ZKCService } from '..';\nimport { ZKCClientBaseURI, ZKCStateURI } from '../config';\nimport { getStateEnv, LOG_ENV, setMemory } from '../state';\n\nexport const { Memory, Table } = WebAssembly;\nexport interface InstanceExport<T extends WebAssembly.Exports> {\n  exports: T;\n}\nexport const BASE_ENV = {\n  memory: new Memory({ initial: 10, maximum: 100 }),\n  table: new Table({ initial: 0, element: 'anyfunc' }),\n  abort: () => {\n    throw new Error('Unsupported wasm api: abort');\n  },\n  require: (b: boolean) => {\n    console.log('Inside wasm: require call(1 means succ!)', b);\n    if (!b) throw new Error('Require failed');\n  },\n  wasm_input: () => {\n    console.error('wasm_input should not been called in non-zkwasm mode');\n    throw new Error('Unsupported wasm api: wasm_input');\n  }\n};\n\nexport const SERVICE_PROVIDER = {\n  STATE: ZKCStateURI,\n  PROVE: ZKCClientBaseURI\n};\n\nexport const DEFAULT_IMPORT = {\n  global: {},\n  env: { ...BASE_ENV, ...LOG_ENV }\n};\n\nasync function instantiateStreamingWasm<T extends WebAssembly.Exports>(\n  wasmFile: URL,\n  importObject = DEFAULT_IMPORT,\n  service = SERVICE_PROVIDER\n) {\n  if (!(wasmFile instanceof URL)) throw new Error('Wrong wasm file url!');\n\n  const { STATE } = service;\n\n  const { global, env, ...rest } = importObject;\n\n  const stateEnv = getStateEnv(STATE);\n\n  console.log(service, '===================ZKC service init');\n\n  const importVariable = {\n    global,\n    env: { ...env, ...stateEnv },\n    ...rest\n  };\n\n  const { instance } = await WebAssembly.instantiateStreaming(\n    fetch(wasmFile),\n    importVariable\n  );\n\n  const memory = instance.exports.memory as WebAssembly.Memory;\n\n  setMemory(memory);\n\n  if (!(instance instanceof WebAssembly.Instance))\n    throw new Error('Load wasm failed!');\n\n  return instance as InstanceExport<T>;\n}\nexport class ZKCWasmService extends ZKCService {\n  static loadWasm = memoize(instantiateStreamingWasm);\n  /**\n   * Deploy wasm application\n   * @param applicationData upload information\n   * @returns application detail\n   */\n  deployWasm(applicationData: DeployWasmApplicationParams) {\n    return this.client.post<ProofDetail>(\n      'application',\n      makeFormData(applicationData)\n    );\n  }\n\n  getWasmApplications(query: WasmApplicationListQueryParams) {\n    return this.client.get<Task[]>(`application?${buildURLData(query)}`);\n  }\n}\n","export type InitWasm = (\r\n  importObject: WebAssembly.Imports\r\n) => Promise<WebAssembly.WebAssemblyInstantiatedSource>;\r\n\r\nexport type IDType = Record<'id', string>;\r\n\r\nexport type BaseType = IDType & Record<'createdAt' | 'updatedAt', string>;\r\n\r\nexport type MD5Type = Record<'md5', string>;\r\n\r\nexport type UserAddressType = Record<'user_address', string>;\r\n\r\nexport type PaginationParameters = Record<'pageIndex' | 'pageSize', number>;\r\n\r\nexport type ZKCInputs = Record<'public_inputs' | 'private_inputs', string[]>;\r\n\r\nexport type WithSignature<T> = T & { signature: string };\r\n\r\nexport type PageData<T extends BaseType> = {\r\n  list: T[];\r\n  count: number;\r\n};\r\n\r\nexport enum TaskStatusEnum {\r\n  PENDING = `Pending`,\r\n  PROCESSING = `Processing`,\r\n  DONE = `Done`,\r\n  FAIL = `Fail`,\r\n  STALE = `Stale`\r\n}\r\n\r\nexport enum TaskTypeEnum {\r\n  SETUP = `Setup`,\r\n  PROVE = `Prove`,\r\n  VERIFY = `Verify`,\r\n  BATCH = `Batch`,\r\n  DEPLOY = `Deploy`,\r\n  RESET = `Reset`\r\n}\r\n\r\nexport type CreateTaskParams = UserAddressType & ZKCInputs & MD5Type;\r\nexport type DeployWasmApplicationParams = WithSignature<\r\n  Record<'address' | 'name' | 'description', string> & {\r\n    data: File[];\r\n    chainList: number[];\r\n  }\r\n>;\r\n\r\nexport interface WasmApplicationListQueryParams\r\n  extends Record<'uuid' | 'address' | 'name' | 'website' | 'keywords', string>,\r\n    Partial<MD5Type & PaginationParameters> {\r\n  chainList: number[];\r\n  tasktype?: TaskTypeEnum;\r\n  taskstatus?: TaskStatusEnum;\r\n}\r\n\r\nexport interface TaskListQueryParams\r\n  extends Partial<UserAddressType & MD5Type & PaginationParameters> {\r\n  tasktype?: TaskTypeEnum;\r\n  taskstatus?: TaskStatusEnum;\r\n}\r\n\r\nexport interface Task\r\n  extends BaseType,\r\n    UserAddressType,\r\n    ZKCInputs,\r\n    MD5Type,\r\n    Record<'submit_time' | 'process_started' | 'process_finished', string>,\r\n    Record<'status_message' | 'internal_message', string | null>,\r\n    Record<'proof' | 'instances' | 'aux', number[]> {\r\n  _id: {\r\n    $oid: string;\r\n  };\r\n  status: TaskStatusEnum;\r\n  task_type: TaskTypeEnum;\r\n  chain_id: number | null;\r\n  task_fee: number[];\r\n  application: WasmApplication;\r\n}\r\n\r\nexport interface WasmApplication\r\n  extends BaseType,\r\n    MD5Type,\r\n    Record<\r\n      'rewardsAccumulated' | 'size' | 'totalRequest' | 'totalWallet',\r\n      number\r\n    >,\r\n    Record<\r\n      | 'address'\r\n      | 'description'\r\n      | 'fileName'\r\n      | 'icon'\r\n      | 'name'\r\n      | 'uuid'\r\n      | 'zkcBalance',\r\n      string\r\n    > {\r\n  chainList: number[];\r\n  type: TaskTypeEnum;\r\n}\r\n\r\nexport interface ProofDetail extends CreateTaskParams {\r\n  application: WasmApplication;\r\n  status: TaskStatusEnum;\r\n}\r\n","export * from './client';\r\n","import { BlockTag, Provider } from '@ethersproject/abstract-provider';\r\nimport { MetaMaskInpageProvider } from '@metamask/providers';\r\nimport { Maybe } from '@metamask/providers/dist/utils';\r\nimport { Contract, ContractInterface, providers, Signer, utils } from 'ethers';\r\nimport { hexlify, hexStripZeros } from 'ethers/lib/utils';\r\n\r\nimport { CHAIN_INFO } from './chain';\r\n\r\nexport interface ChainInfo {\r\n  chainId: number;\r\n  chainName: string;\r\n  nativeCurrency: {\r\n    name: string;\r\n    symbol: string;\r\n    decimals: number;\r\n  };\r\n  rpcUrls: string[];\r\n  blockExplorerUrls: string[];\r\n}\r\n\r\nexport interface AccountInfo {\r\n  /**\r\n   * the account address\r\n   */\r\n  address: string;\r\n  /**\r\n   * the network id\r\n   */\r\n  chainId: string;\r\n  /**\r\n   * the signer object\r\n   */\r\n  signer: providers.JsonRpcSigner;\r\n}\r\n\r\nexport class ZKCWeb3Contract {\r\n  private readonly _ABI: ContractInterface;\r\n  private readonly _contract: Contract;\r\n\r\n  /**\r\n   * @param address Contract address\r\n   * @param abi Contract ABI\r\n   * @param signerOrProvider Signer or provider\r\n   */\r\n  constructor(\r\n    address: string,\r\n    abi: ContractInterface,\r\n    signerOrProvider?: Signer | Provider\r\n  ) {\r\n    this._ABI = abi;\r\n    this._contract = new Contract(address, abi, signerOrProvider);\r\n  }\r\n\r\n  /**\r\n   * Get the abi of this contract.\r\n   */\r\n  get ABI() {\r\n    return this._ABI;\r\n  }\r\n\r\n  /**\r\n   * Get the address of the contract.\r\n   */\r\n  get address() {\r\n    return this._contract.address;\r\n  }\r\n\r\n  /**\r\n   * Get the contract object\r\n   */\r\n  get contract() {\r\n    return this._contract;\r\n  }\r\n\r\n  /**\r\n   * Get all events for the contract starting from the height of the starting block.\r\n   * @param fromBlock Height of the starting block\r\n   * @returns all events for the contract starting from the height of the starting block\r\n   */\r\n  getPastEventsFrom(fromBlock: BlockTag) {\r\n    return this._contract.queryFilter('*', fromBlock);\r\n  }\r\n\r\n  /**\r\n   * Get all events for the contract from the start block height to the end block height.\r\n   * @param fromBlock the start block height\r\n   * @param toBlock the end block height\r\n   * @returns all events for the contract from the start block height to the end block height\r\n   */\r\n  getPastEventsFromTo(fromBlock: BlockTag, toBlock: BlockTag) {\r\n    return this._contract.queryFilter('*', fromBlock, toBlock);\r\n  }\r\n\r\n  /**\r\n   * Get all the events of the contract from the start block height to the end block height,\r\n   * and grouped according to the fixed block height.\r\n   * @param fromBlock the start block height\r\n   * @param toBlock the end block height\r\n   * @param step fixed block height\r\n   * @returns events of the contract that have been grouped\r\n   */\r\n  async getPastEventsFromSteped(\r\n    fromBlock: number,\r\n    toBlock: number,\r\n    step: number\r\n  ) {\r\n    const pastEvents = [];\r\n    let end = 0;\r\n\r\n    if (fromBlock > toBlock) {\r\n      console.log(`No New Blocks Found From: ${fromBlock}`);\r\n      return { events: [], breakpoint: null };\r\n    }\r\n\r\n    if (step <= 0) {\r\n      pastEvents.push(await this.getPastEventsFromTo(fromBlock, toBlock));\r\n      end = toBlock;\r\n      console.log(`getEvents from ${fromBlock} to ${toBlock}`);\r\n    } else {\r\n      let start = fromBlock,\r\n        count = 0;\r\n\r\n      while (end < toBlock && count < 10) {\r\n        end = Math.min(start + step - 1, toBlock);\r\n\r\n        console.log(`getEvents from ${start} to ${end}`);\r\n        const group = await this.getPastEventsFromTo(start, end);\r\n\r\n        if (group.length > 0) pastEvents.push(group);\r\n        start += step;\r\n        count++;\r\n      }\r\n    }\r\n\r\n    return { events: pastEvents, breakpoint: end };\r\n  }\r\n}\r\n\r\nexport class ZKCWeb3JsonRpcSigner {\r\n  private _signer: providers.JsonRpcSigner;\r\n\r\n  constructor(provider: providers.Web3Provider) {\r\n    this._signer = provider.getSigner();\r\n  }\r\n\r\n  /**\r\n   * Get signer object.\r\n   */\r\n  get signer() {\r\n    return this._signer;\r\n  }\r\n\r\n  /**\r\n   * Get the provider of the Signer object.\r\n   */\r\n  get provider() {\r\n    return this._signer.provider;\r\n  }\r\n\r\n  /**\r\n   * Get the account address of the Signer object.\r\n   * @returns the account address of the Signer object\r\n   */\r\n  getAccount() {\r\n    return this._signer.getAddress();\r\n  }\r\n\r\n  connect(provider: Provider) {\r\n    return this._signer.connect(provider);\r\n  }\r\n\r\n  /**\r\n   * Get the account information of the signer object.\r\n   * @returns accoun's info\r\n   */\r\n  async getAccountInfo(): Promise<AccountInfo> {\r\n    const address = await this.getAccount();\r\n    const chainId = (await this._signer.getChainId()) + '';\r\n\r\n    return { address, chainId, signer: this._signer };\r\n  }\r\n\r\n  /**\r\n   * Get the contract object associated with the current Signer.\r\n   * @param address contract address\r\n   * @param abi contract address\r\n   * @returns the contract object associated with the current Signer.\r\n   */\r\n  getContractWithSigner(address: string, abi: ContractInterface) {\r\n    return new ZKCWeb3Contract(address, abi, this._signer);\r\n  }\r\n}\r\n\r\nexport abstract class ZKCWeb3Provider {\r\n  private _provider: providers.Web3Provider;\r\n\r\n  /**\r\n   * @param provider providers.ExternalProvider | providers.JsonRpcFetchFunc\r\n   */\r\n  constructor(\r\n    provider: providers.ExternalProvider | providers.JsonRpcFetchFunc\r\n  ) {\r\n    this._provider = new providers.Web3Provider(provider);\r\n  }\r\n\r\n  get provider() {\r\n    return this._provider;\r\n  }\r\n\r\n  /**\r\n   * Get the network id of the provider object.\r\n   * @returns the network id of the provider object\r\n   */\r\n  getNetwork() {\r\n    return this._provider.getNetwork();\r\n  }\r\n\r\n  /**\r\n   * Connect the wallet.\r\n   */\r\n  abstract connect(): Promise<string[]>;\r\n\r\n  /**\r\n   * Select Network.\r\n   * @param chainInfo Network information\r\n   */\r\n  abstract switchNet<T>(chainInfo?: ChainInfo): Promise<Maybe<T>>;\r\n\r\n  abstract sign(message: string): Promise<string>;\r\n\r\n  abstract checkAccount(user_address?: string): Promise<string>;\r\n\r\n  /**\r\n   * Get the contract object with signer.\r\n   * @param address the address of the contract\r\n   * @param abi the abi of the contract\r\n   * @returns the contract object with signer\r\n   */\r\n  getContractWithoutSigner(address: string, abi: ContractInterface) {\r\n    return new ZKCWeb3Contract(address, abi, this._provider);\r\n  }\r\n}\r\n\r\nexport class ZKCWeb3MetaMaskProvider extends ZKCWeb3Provider {\r\n  private _externalProvider: MetaMaskInpageProvider;\r\n\r\n  constructor() {\r\n    if (!window.ethereum)\r\n      throw 'MetaMask not installed, Browser mode is not available.';\r\n\r\n    super(window.ethereum as unknown as providers.JsonRpcFetchFunc);\r\n    this._externalProvider = window.ethereum;\r\n  }\r\n\r\n  get externalProvider() {\r\n    return this._externalProvider;\r\n  }\r\n\r\n  connect() {\r\n    return this._externalProvider.request({\r\n      method: 'eth_requestAccounts'\r\n    }) as Promise<string[]>;\r\n  }\r\n\r\n  private switchChain<T>(newChainIdHexString: string) {\r\n    return this._externalProvider.request<T>({\r\n      method: 'wallet_switchEthereumChain',\r\n      params: [{ chainId: newChainIdHexString }]\r\n    });\r\n  }\r\n\r\n  private addChain<T>(chainInfo: ChainInfo) {\r\n    return this._externalProvider.request<T>({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [chainInfo]\r\n    });\r\n  }\r\n\r\n  async switchNet<T>(chainInfo = CHAIN_INFO[0]) {\r\n    const newChainId = chainInfo.chainId;\r\n    const newChainIdHexString = hexStripZeros(hexlify(newChainId));\r\n    const oldChainId = (await this.getNetwork()).chainId;\r\n\r\n    console.log(`switch chain from ${oldChainId} to ${newChainId}`);\r\n\r\n    if (oldChainId === newChainId) return;\r\n\r\n    try {\r\n      return await this.switchChain<T>(newChainIdHexString);\r\n    } catch (error: any) {\r\n      if (error.code === 4902) return this.addChain<T>(chainInfo);\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async checkAccount(user_address?: string) {\r\n    const [account] = await this.connect();\r\n\r\n    if (!account) throw new ReferenceError('Account connect error!');\r\n\r\n    if (user_address && account.toLowerCase() !== user_address.toLowerCase())\r\n      throw new ReferenceError('Account insistent!');\r\n\r\n    return account;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to event.\r\n   * @param eventName event name\r\n   * @param callback callback function\r\n   */\r\n  subscribeEvent<T>(eventName: providers.EventType, callback: (arg: T) => any) {\r\n    this.provider.on(eventName, callback);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to the `reciptsChanged` event.\r\n   * @param callback callback function\r\n   */\r\n  onAccountsChanged(callback: (account: string) => any) {\r\n    this.subscribeEvent<string[]>('accountsChanged', ([account]) =>\r\n      callback.call(this, account)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get JsonRpcSigner object.\r\n   * @returns JsonRpcSigner object\r\n   */\r\n  getZKCWeb3JsonRpcSigner() {\r\n    return new ZKCWeb3JsonRpcSigner(this.provider);\r\n  }\r\n\r\n  /**\r\n   * Signature\r\n   * @param message signature message\r\n   * @returns Signature certificate\r\n   */\r\n  async sign(message: string) {\r\n    const messageHexString = utils.hexlify(utils.toUtf8Bytes(message));\r\n\r\n    const account = await this.getZKCWeb3JsonRpcSigner().getAccount();\r\n\r\n    return this._externalProvider.request<string>({\r\n      method: 'personal_sign',\r\n      params: [messageHexString, account]\r\n    }) as Promise<string>;\r\n  }\r\n}\r\n\r\nasync function withZKCWeb3Provider<T>(\r\n  zkcWeb3Provider: ZKCWeb3Provider,\r\n  cb: (web3: ZKCWeb3Provider) => Promise<T> | T\r\n) {\r\n  await zkcWeb3Provider.connect();\r\n  return cb(zkcWeb3Provider);\r\n}\r\n\r\nexport function withZKCWeb3MetaMaskProvider<T>(\r\n  cb: (provider: ZKCWeb3Provider) => Promise<T> | T\r\n) {\r\n  return withZKCWeb3Provider(new ZKCWeb3MetaMaskProvider(), cb);\r\n}\r\n","export const CHAIN_INFO = [\r\n  {\r\n    chainId: 5,\r\n    chainName: 'Goerli',\r\n    nativeCurrency: {\r\n      name: 'Goerli',\r\n      symbol: 'ETH',\r\n      decimals: 18\r\n    },\r\n    rpcUrls: ['https://rpc.ankr.com/eth_goerli'],\r\n    blockExplorerUrls: ['https://goerli.etherscan.io']\r\n  },\r\n];\r\n"],"names":[],"version":3,"file":"index.js.map"}